map @routineMap {
  @instructionList mInstructionList
  insert insertKey error message "the '%K' routine has been already declared"
  search searchKey error message "the '%K' routine is not declared"
}

abstract class @instruction {
}
abstract method @instruction codeDisplay
  ?!@bool ioPenDown
  ?!@double ioX
  ?!@double ioY
  ?!@double ioAngle
  ?!@string SVG

class @penUp : @instruction {
}
override method @penUp codeDisplay
  ?!@bool ioPenDown
  ?!@double unused ioX
  ?!@double unused ioY
  ?!@double unused ioAngle
  ?!@string unused SVG
{
  ioPenDown = false
}

class @penDown : @instruction {
}
override method @penDown codeDisplay
  ?!@bool ioPenDown
  ?!@double unused ioX
  ?!@double unused ioY
  ?!@double unused ioAngle
  ?!@string unused SVG
{
  ioPenDown = true
}

class @forward : @instruction {
  @luint mLength
}
override method @forward codeDisplay
  ?!@bool   ioPenDown
  ?!@double ioX
  ?!@double ioY
  ?!@double ioAngle
  ?!@string SVG
{
  @double relativeX = [ioAngle cosDegree] * [[mLength uint] double]
  @double relativeY = [ioAngle sinDegree] * [[mLength uint] double]
  if ioPenDown then
    message "Drawing from ("+ioX+", "+ioY+") the segment ("+relativeX+", "+relativeY+")\n"
    SVG = SVG + "l"+relativeX+","+relativeY
  else
    SVG = SVG + "m"+relativeX+","+relativeY
  end
  ioX = ioX + relativeX
  ioY = ioY + relativeY
}

class @rotate : @instruction {
  @luint mAngle
}
override method @rotate codeDisplay
  ?!@bool   unused ioPenDown
  ?!@double unused ioX
  ?!@double unused ioY
  ?!@double ioAngle
  ?!@string unused SVG
{
  ioAngle = ioAngle + [[mAngle uint] double]
}

list @instructionList {
  @instruction mInstruction
}

filewrapper generationTemplate in "." {
} {} {
template svg "logo-svg.galgasTemplate"
  ?@string TITLE
  ?@string DRAWINGS
}

